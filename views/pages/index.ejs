<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- <meta http-equiv="refresh" content="5"> -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
      rel="stylesheet"
    />
    <script src="https://cdn.plot.ly/plotly-2.5.1.min.js"></script>
    <style>
      .btn {
        cursor: pointer;
        outline: none;
        border: 0.5px solid #5789f4;
        color: #5789f4;
        text-transform: uppercase;
        font-family: Roboto, san-serif;
        border-radius: 10px;
        padding: 0.2em 2em;
        max-width: 100%;
        min-height: 33px;
        display: inline-block;
        transition: all 0.2s ease;
        overflow: hidden;
        text-overflow: ellipsis;
        color: #555;
        text-align: center;
        font-size: 11px;
        font-weight: 600;
        line-height: 2em;
        letter-spacing: 0.1rem;
        background-color: white;
      }

      .btn:hover {
        background-color: #d9d9d9;
      }

      #sort-btn {
        margin-left: 70px;
      }
    </style>
    <title>Độ sâu thị trường</title>
  </head>
  <body>
    <div id="myDiv"></div>
    <button class="btn" id="sort-btn" onclick="toggleSort()">Sort</button>

    <script>
      async function fetchData() {
        let data = await fetch('http://localhost:5998/get-data')
        data = await data.json()
        return data
      }

      let isRendered = false
      let sortByName = true
      const RENDER_INTERVAL = 2000

      function toggleSort() {
        console.log('CLICK')
        sortByName = !sortByName
        console.log(sortByName)
      }

      function numberWithCommas(x) {
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',')
      }

      async function setupData() {
        // let arr =  <%- JSON.stringify(globalArr) %>
        // console.log(JSON.parse(arr));
        let arr = await fetchData()
        if (sortByName) {
          arr = arr.sort((a, b) => (a.code < b.code ? 1 : -1))
        } else {
          arr = arr.sort((a, b) =>
            a.totalBid + a.totalAsk > b.totalBid + b.totalAsk ? 1 : -1
          )
        }
        let codes = arr.map(({ code }) => code)
        const bidArr = arr.map(({ totalBid }) => totalBid)
        const askArr = arr.map(({ totalAsk }) => totalAsk)
        // console.log(arr.find(({ code }) => code == 'HPG'))

        const textfont = {
          family: 'Roboto, sans serif',
          size: 18,
          color: 'white',
        }

        const trace1 = {
          y: codes,
          x: bidArr,
          name: 'Bid',
          type: 'bar',
          orientation: 'h',
          marker: {
            color: '#25A69A',
          },
          text: bidArr.map((num) => numberWithCommas(+num * 1000)),
          textfont,
        }

        const trace2 = {
          y: codes,
          x: askArr,
          name: 'Ask',
          type: 'bar',
          orientation: 'h',
          marker: {
            color: '#EF5350',
          },
          text: askArr.map((num) => numberWithCommas(+num * 1000)),
          textfont,
        }

        // return [trace1, trace2]
        const data = [trace1, trace2]
        const layout = {
          barmode: 'stack',
          height: 900,
          margin: {
            pad: 5,
          },
          xaxis: {
            zeroline: false,
            showline: false,
          },
        }
        if (!isRendered) {
          Plotly.newPlot('myDiv', data, layout)
          // console.log(Plotly);
          isRendered = true
        } else {
          // Plotly.update('myDiv', data, layout)
          console.log('Updated')
          // Plotly.restyle('myDiv', 'data', data, [1, 2]);
          Plotly.restyle('myDiv', {
            x: [trace1.x, trace2.x],
            y: [trace1.y, trace2.y],
          })
        }
      }

      // const [trace1, trace2] = setupData()
      // let data = [trace1, trace2]
      // const layout = { barmode: 'stack', height: 1000}
      // Plotly.newPlot('myDiv', data, layout)

      // function updatePlot() {

      // }
      // setInterval(() => {
      //   let arr =  <%- JSON.stringify(globalArr) %>
      //   const hpg = arr.find(({code}) => code === 'HPG')
      //   console.log(hpg);
      //   let [trace1, trace2] = getData()
      //   data = [trace1, trace2]
      //   Plotly.newPlot('myDiv', data, layout)
      //   console.log('UPDATED');
      // }, RENDER_INTERVAL)

      setInterval(() => {
        setupData()
      }, 1000)

      function renderPlot() {}
    </script>
  </body>
</html>
